/*
前后端交互用脚本文件
所有函数前缀均为IA（交互的意思）
因为这些位于交互层的代码，是前端与后端之间的桥梁与纽带
有的与前端交互，直接操作UI，有的则与后端交互，负责数据传输
 */

//设置窗口样式
function IA_setStyle(style)
{
    var currentThemeUrl = "./themes/style_circle.css"; //The Default Theme is Circle 默认圆形窗口主题
    var elStyle = $(style#current-theme);
    switch (style) {
        case "Circle":
            elStyle.deactivate(); // remove all rules
            elStyle.attributes["src"] = currentThemeUrl; // set src
            elStyle.activate(); // add rules
            stdout.println("Use The Circle Theme");
            break;
        case "REdge":
            currentThemeUrl = "./themes/style_redge.css"; //The Rounded-Edge Theme 圆角矩形窗口主题
            elStyle.deactivate(); // remove all rules
            elStyle.attributes["src"] = currentThemeUrl; // set src
            elStyle.activate(); // add rules
            stdout.println("Use The Rounded-Edge Theme");
            break;
        case "Rect":
            currentThemeUrl = "./themes/style_rect.css"; //The Rect Theme 直角矩形主题
            elStyle.deactivate(); // remove all rules
            elStyle.attributes["src"] = currentThemeUrl; // set src
            elStyle.activate(); // add rules
            stdout.println("Use The Rect Theme");
            break;
        case "NULL":
            elStyle.deactivate(); // remove all rules
            elStyle.attributes["src"] = currentThemeUrl; // set src
            elStyle.activate(); // add rules
            stdout.println("Null Theme Not Supported,Use The Default Theme");
            break;
            // code
        default:
            elStyle.deactivate(); // remove all rules
            elStyle.attributes["src"] = currentThemeUrl; // set src
            elStyle.activate(); // add rules
            stdout.println("Unknown Style Type("+ style +"),Use The Default Theme");
            break;
            // code
    }
}
function IA_debugLogs(logs)
{
    stdout.println(logs);
}
//用于开启窗体UI调试
function IA_uiDebugMode(isEnabled)
{
    var debugStyleUrl = "./style_debug.css"; //The Default Theme is Circle 默认圆形窗口主题
    var uiDebugStyle = $(style#ui-debug);
    if(isEnabled)
    {
        uiDebugStyle.deactivate();
        uiDebugStyle.attributes["src"] = debugStyleUrl;
        uiDebugStyle.activate();
        IA_DebugFunction();
    }
    else
    {
        uiDebugStyle.deactivate();
        uiDebugStyle.attributes["src"] = null;
        uiDebugStyle.activate();
    }
}
//用于执行特殊调试任务
function IA_DebugFunction(){
        stdout.printf("Test:%v\n",typeof(self.ns.view.NA_getStyle));
}

/*
添加调试代码区
Coded on 2021.2.11
Updated on sonedate by ...
 */
//without '()‘
function func_isDefined(funcName)
{
    try
    {
        switch(funcName)
        {
            case "view.NA_getWorkDir":
                return typeof(view.NA_getWorkDir()) == #symbol;
            case "view.NA_getStyle":
                return typeof(view.NA_getStyle()) == #symbol;
            case "view.NA_getTime":
                return typeof(view.NA_getTime()) == #symbol;
            case "view.NA_setStyle":
                return typeof(view.NA_setStyle()) == #symbol;
            case "view.NA_setTime":
                return typeof(view.NA_setTime()) == #symbol;
            case "view.NA_getPos":
                return typeof(view.NA_getPos()) == #symbol;
            case "view.NA_setPos":

                return typeof(view.NA_setPos()) == #symbol;
            default:
                return false;
        }
    }
    catch(e)
    {
        stdout.printf("%s\r\n",e);
        return false;
    }
}
function NA_getStyle()
{
    if(func_isDefined("view.NA_getStyle"))
    {
        return view.NA_getStyle(); 
    }else{
        stdout.print("NA_getStyle() is undefined!");
        return "Circle"; //return default style
    }
}

function NA_setStyle(style)
{
    if(func_isDefined("view.NA_setStyle"))
    {
        return view.NA_setStyle(style); 
    }else{
        stdout.print("NA_setStyle() is undefined!");
        return "NULL";
    }
}

function NA_getTime()
{
    if(func_isDefined("view.NA_getTime"))
    {
        return view.NA_getTime();
    }else{
        stdout.print("NA_getTime() is undefined!");
        return "2021-01-06T00:00:00+08:00";
    }
}

function NA_setTime(time)
{
    if(func_isDefined("view.NA_setTime"))
    {
        return view.NA_setTime(time); 
    }else{
        stdout.print("NA_setTime() is undefined!");
        return "NULL";
    }
}

function NA_getPos()
{
    if(func_isDefined("view.NA_getPos"))
    {
        return view.NA_getPos();
    }else{
        stdout.print("NA_getPos() is undefined!");
        return "NULL"; //to place mainwindow at the centre of the monitor(default option),return 'NULL' without ','
        //details from scripts.tis
    }
}

function NA_setPos(pos)
{
    if(func_isDefined("view.NA_setPos"))
    {
        return view.NA_setPos(pos);
    }else{
        stdout.print("NA_setPos() is undefined!");
        return "NULL"; //to place mainwindow at the centre of the monitor(default option),return 'NULL' without ','
        //details from scripts.tis
    }
}

function NA_getWorkDir()
{
    if(func_isDefined("view.NA_getWorkDir"))
    {
        return view.NA_getWorkDir();
    }else{
        stdout.print("NA_getWorkDir() is undefined!");
        return System.home();  //Return by native method of sciter
    }
}