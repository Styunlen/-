/*
前端用脚本文件
直接操作UI层
 */
include "interactive.tis";

/***************
 变量声明定义区
****************/

const body = $(body);



/***************
   自定义方法区
****************/
function debugLogs(logs) {
    stdout.println(logs);
}
function checkGfx() {
    if (!view.backend) view.msgbox(#alert, "Failed to initialize layered window!");
    return ["Unknown", "GDI+", "D2D/WARP", "D2D/DX"][view.backend];
}
function toInt(i) {
    var res = i.toInteger();
    return res;
}

var iPer = 0.0; //进度条
var strTimeset = view.NA_getTime().toString();
var dateTarget;
var datePbStart = Date.local(2020, 6, 7, 00, 00, 00); //进度条开始时间
function timeInit()//初始化时间
{
    var dateNow = new Date();
    //stdout.println(typeof(view.NA_getTime().toString()));
    stdout.println(strTimeset);
    if(strTimeset == "NULL")
        dateTarget = new Date(2021,01,06,00,00,00);
    else
        dateTarget = new Date(view.NA_getTime().toString());
    stdout.printf("timeNow: %s, timeSet: %s\n",dateNow.toString(), dateTarget.toString());
}
timeInit();
function updateTimeRemaining() {
    var dateNow = new Date();
    var millisecondsRemaining = dateTarget.valueOf() - dateNow.valueOf();
    if (millisecondsRemaining >= 0) {
        //Fixed (2020-8-29): 时间算法更新
        iPer = (millisecondsRemaining / (dateTarget.valueOf() - datePbStart.valueOf())) * 100;
        var daysRemaining = millisecondsRemaining / 86400000;
        var hoursR, minR, secR;
        hoursR = toInt((millisecondsRemaining - daysRemaining.toInteger() * 86400000.0) / 3600000.0);
        minR = toInt((millisecondsRemaining - daysRemaining.toInteger() * 86400000.0) / 60000.0 - (hoursR) * 60);
        secR = toInt((millisecondsRemaining - daysRemaining.toInteger() * 86400000.0) / 1000.0 - (hoursR) * 3600 - (minR) * 60 - 1);
        //hoursR = hoursR - 1;
        $(#day).text = toInt(daysRemaining).toString();
        $(#hour).text = hoursR.toString().length > 1 ? hoursR.toString() : "0" + hoursR.toString();
        $(#min).text = minR.toString().length > 1 ? minR.toString() : "0" + minR.toString();
        $(#sec).text = secR.toString().length > 1 ? secR.toString() : "0" + secR.toString();
        //stdout.println(iPer, daysRemaining, hoursR, minR, secR);
        body.timer(1000, ::updateTimeRemaining());
    } else {
        $(#timeRemaining).html = "<p style=\"font-size:20dip;color:red\">十年寒窗日，只为今日试！<br>祝大家旗开得胜！</p>";
    }
}
updateTimeRemaining();
function self.ready() {
    // positioning in the middle of the screen:
    var (sx, sy, sw, sh) = view.screenBox(#workarea, #rectw);
    var (w, h) = self.$(body).box(#dimension);
    w += w / 2; // to accomodate expanding radii
    h += h / 2;
    var pos = view.NA_getPos().toString().split(',');
    if(pos.length > 1)
    {
        stdout.print("Restore the last Window Position ");
        stdout.println("x:",pos[0],",y:",pos[1]);
        view.move(pos[0].toInteger(),pos[1].toInteger(),w,h);
    }
    else
    {
        stdout.print("Default display in the center of the screen");
        view.move(sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);
    }
    stdout.printf("sx:%d,sy:%d,sw:%d,sh:%d,w:%d,h:%d\n",sx,sy,sw,sh,w,h);
    stdout.printf("(sx + (sw - w) / 2): %d ,(sy + (sh - h) / 2): %d\n",sx + (sw - w) / 2, sy + (sh - h) / 2);
    //stdout.printf("TimeNow: %s ,Timeset: %s\n", new Date(), new Date(view.NA_getTime().toString()));
    view.windowIcon = "./favicon.ico";
    body.timer(1, ::this.attributes.addClass("shown"));
    stdout.println(checkGfx());
    body.timer(500, ::updateProgressBar());
    IA_setStyle(view.NA_getStyle());
    stdout.println("Current WorkDir: ",view.NA_getWorkDir());
    stdout.println("Current WindowStyle: ",view.NA_getStyle());
}

function updateProgressBar() {
    var iDeg = 0.0;
    //stdout.println(iDeg);
    //FIXED (2020.8.29):倒计时动画更改为从100%到0%(应大部分人的要求)
    // @FixedTime 2020-8-29
    if (iPer >= 50) {
        iDeg = (iPer - 50) / 100.0 * (360) - 180; //只需操作左半边，100%旋转0deg, 50%旋转-180deg
        $$(.leftcircle)[0].style#transition = "transform(back-out,500ms)";
        $$(.leftcircle)[0].style#transform = "rotate(" + iDeg.toString() + "deg)";
    } else {
        iDeg = iPer / 100.0 * (360) - 180; //左半边隐藏，操作右半边, 50%旋转0deg, 0%旋转-180deg
        $$(.leftcircle)[0].style#transition = "transform(linear,400ms)";
        $$(.leftcircle)[0].style#transform = "rotate(-180deg)";
        $$(.rightcircle)[0].style#transition = "transform(back-out,500ms,400ms)";
        $$(.rightcircle)[0].style#transform = "rotate(" + iDeg.toString() + "deg)";
        if (iPer <= 5) {
            $$(.rightcircle_fix)[0].style#transition = "transform(linear,0ms,500ms)";
            $$(.rightcircle_fix)[0].style#transform = "rotate(-210deg)";
        }
    }

    //iPer = (iPer.toInteger() + 1) % 101;
    //body.timer(500, :: updateProgressBar());
}

/***************
 窗口事件处理区
****************/

$(#close).onClick = function() {
    //view.msgbox(#info,view.box(#position));
    var (x,y) = view.box(#position,#border,#screen);
    var pos = x.toString() + "," + y.toString();
    view.NA_setPos(pos);//只有通过菜单关闭才会保存位置(间接完成了窗口超出屏幕范围的判断)
    body.onAnimationEnd = ::view.close();
    body.attributes.removeClass("shown");
}

$(#minimize).onClick = function() {
    body.attributes.removeClass("shown");
    body.attributes.addClass("hidden");
    view.state = View.WINDOW_MINIMIZED;
    view.Test();
}

$(#setting).onClick = function() {
    this.sendMouseEvent({type: Event.MOUSE_DOWN,x: 0,y: 0});//隐藏popup
    var v = view.dialog({
        url: self.url("win_setting.html"),
        alignment: -5,
        parameters:{hostview: this.root.ns.view}
    });
    stdout.printf("win_setting result:%v\n",v);
}

function onWinStateChange() {
    if (view.state == View.WINDOW_SHOWN) {
        //stdout.println("qwq");
        body.attributes.removeClass("hidden");
        body.attributes.addClass("shown");
    }
    if (view.state == View.WINDOW_MINIMIZED) {
        stdout.println("qwq");
        body.attributes.removeClass("shown");
        body.attributes.addClass("hidden");
    }
}

function onWinClosing() {
    body.onAnimationEnd = ::view.close();
    body.attributes.removeClass("shown");
    return false;
}

function movable() // install movable window handler
{
    var xoff, yoff;
    var dragging = false;
    var movableArea = $(section.main);
    stdout.print("MovableArea:");
    stdout.println($(section.main));
    function doDrag() {
        while (dragging) {
            var (x,y) = view.box(#position,#border,#screen);
            stdout.printf("Border(x:%d,y:%d)",x,y);
            (x,y) = view.box(#position,#client,#screen);
            stdout.printf(",Client(x:%d,y:%d)\n",x,y);
            view.doEvent();
        }
    }

    function onMouseDown(evt) {
        if (evt.target !== movableArea) return false;
        xoff = evt.x;
        yoff = evt.y;
        dragging = true;
        view.root.capture(true);
        doDrag();
        return true;
    }

    function onMouseMove(evt) {
        if (dragging) {
            view.move(evt.xScreen - xoff, evt.yScreen - yoff, true); // true - x,y are coordinates of the client area on the screen
            return true;
        }
        return false;
    }

    function stopDrag() {
        if (dragging) {
            dragging = false;
            view.root.capture(false);
            return true;
        }
        return false;
    }

    function onMouseUp(evt) {
        return stopDrag();
    }
    function onKeyDown(evt) {
        if (evt.keyCode == Event.VK_ESCAPE) return stopDrag();
    }

    // hookup event handlers:
    view.root.subscribe(onMouseDown, Event.MOUSE, Event.MOUSE_DOWN);
    view.root.subscribe(onMouseUp, Event.MOUSE, Event.MOUSE_UP);
    view.root.subscribe(onMouseMove, Event.MOUSE, Event.MOUSE_MOVE);
    view.root.subscribe(onKeyDown, Event.KEY, Event.KEY_DOWN);
    view.on("statechange", onWinStateChange);
    view.on("closing", onWinClosing);
    return false;
}

movable();

self.on("complete",
function() {
    stdout.println("got complete");
    stdout.printf("Test:%s\n",NA_getStyle());
    stdout.printf("Test:%v\n",typeof(NA_getStyle));
});